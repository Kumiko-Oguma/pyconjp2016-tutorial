=============================
第1部 Pythonの基礎
=============================

第1部では、実際のプログラミングで必要な基礎知識を身につけていただきます。

.. contents:: 目次

参加者さんのレベルも様々かと思いますので、わかる方は早速課題からとりかかっていただいても構いません。

Pythonとは
=============================
* Pythonはもともとは教育用言語として開発されました。しかし機能はほかのプログラミング言語に引けを取らず、今やシステム開発や研究の現場で数多く利用されています。

* PythonはRubyやPHPをはじめとするコンパイル不要な `インタプリタ言語` の一種です。

  * 書けばすぐ動きます。C言語やJava, Go言語のような `コンパイル言語` では実行前にコンパイルという作業が必要になります。
  
* インデントとよばれるスペースやタブが `ブロック` となるためコードが綺麗になります。

  * `ブロック` とは ``意味を持った処理の塊`` と思ってください。実例とともに理解していけると思います。

変数
=============================
* Pythonにかぎらずプログラミング言語には `変数` という機能があります。
* よく `値の入れ物` だとか `保持しておく容器` のような説明がされますが、これ以上の説明は難しいので実例を見ていただきます。

.. code-block:: python

  a = 1
  b = a
  c = a + 1
  
  # 上記を実施後「a」だけを入力すると「a」の中身を見ることができます。
  a
  # 「b」「c」の中もそれぞれ見てみましょう。以降このように値を見ることを「参照する」といいます。
  

* `変数` は `=` (イコール)記号によって `右辺` の値を `左辺` に `代入` することで初めて利用できるようになります。

* 一度も代入が行われていない `変数` は見ることができません。例えば下記のように代入していない変数「z」を 参照してみましょう。

.. code-block:: python

  z


以下の様なエラーが発生します::

  Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
  NameError: name 'z' is not defined

* すでに値が入っている変数に対して再度代入(再代入)することもできます。

.. code-block:: python

  a = 2
  a = 3


コラム
---------------------------------
* Pythonは動的型付け言語と呼ばれており、変数に対して直接値を代入することができましたが、 `C` や `Java` といった言語では宣言後に指定された `型` しか代入できません。

  * Pythonの方が気軽に思えますが、どちらも一長一短があるため必ずしもどちらが良いとは言えません。
  * 型とは `数値` や `文字列` といったもので、値の性質を表しています。
  
    * 例えばPythonでそれぞれの型を加算すると、数値は ``1 + 2 = 3`` となり、文字列は ``'1' + '2' = '12'`` となります。

* プログラミング言語の中には「関数型言語」と呼ばれるものがあり、一度代入した変数に `再代入` できないプログラミング言語も存在します。
* 変数を作成する方法は `=` を使った代入だけではありません。後述する `関数` の宣言や、インポート文でも変数が作成されています。

* 作成されていなくても参照できる変数があります。具体的には `range` や `int` などといったものです。

  * これらは `ビルトインスコープ` というスコープに属する ``常に参照できる`` 特殊な変数です。
  
    * `スコープ` というものについてこのチュートリアルで詳しく理解する必要はありませんが、``常に参照できる`` 特殊な変数が存在するということは覚えておいてください。

関数の定義と使用
=============================
* プログラムを書いていると `同じような処理` を何度も書く必要があると思います。
* この `同じような処理` を切り出して、繰り返し利用できるようにしたものが `関数` です。
* 数学の `関数` と同じように規則的に処理を行ってくれます。

  * たとえば ``f(x) = 2x`` であれば以下のように `xの値を2倍する` という規則で値を生成します。
  
    * `x=1` のとき `f(1)=2`
    * `x=2` のとき `f(2)=4` 
  
* `python` の関数は数学の関数よりもはるかに柔軟で計算以外のことも実施できます。
* 以下は時給(wage)と働いた時間を受け取り、給料を表示する `calc_wage` 関数の宣言と実行です。どのような結果になるか試してみてください。

.. code-block:: python

  def calc_wage(wage, hours):
      total_wage = wage * hours
      print(total_wage, '円')

  calc_wage(900, 5)

* 関数が受け取る値を引数(ひきすう)といいます。関数宣言時の引数の受け取りは必須ではなく、逆に上限もありません。

  * 実行時の引数の数が宣言時と合わないとエラーになります。例えば以下のように ``引数を1つだけ受け取る関数`` を定義してみましょう。

  .. code-block:: python

    def arg_test(a):
        print(a)

  ``arg_test()`` と実行してみましょう::
  
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: arg_test() takes exactly 1 argument (0 given)

  ``arg_test(1,2)`` と実行してみましょう::
  
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: arg_test() takes exactly 1 argument (2 given)

* 関数が返却する値を `返却値` や `返り値` 、`戻り値` などと言ったりします。

  * `return` 文は必須ではなく、省略すると、何もないことを示す `None` が返却されます。


ライブラリのインポート
=============================
* 自分以外が作成した便利な関数などをまとめたものを `ライブラリ` といいます。
* ライブラリは `インポート` することで使えます。
* たとえば `datetime` という日時を操作するライブラリは以下のように `import` 文を用いることで利用できるようになります。

.. code-block:: python

  import datetime

  one_day = datetime.datetime(2016, 1, 31)  # datetimeライブラリのdatetimeを使います。
  print(one_day)


以下のように出力されます::

  2016-01-31 00:00:00


コラム
------------------
* 先ほどの記述方法では `datetime` ライブラリの `datetime` ということで `datetime.datetime(2016, 1, 31)` のように書く必要がありました。
* `import` 文の前に `from` をつけて以下のように記述することができます。

.. code-block:: python

  from datetime import datetime

  one_day = datetime(2016, 1, 31)
  print(one_day)


* こちらの方法だとライブラリ名を省略して `datetime(2016, 1, 31)` のように短縮した形式で記述することができます。
* 必要な物だけを `import` し、記述量を減らすことができる記述方法です。必須ではありませんが、便利なのでぜひ使ってみてください。

分岐と反復(ループ)
=============================
* プログラムは `順次`, `分岐`, `反復` といった基本動作の組み合わせによって動作します。
* 順次とは ``上から順に実行すること`` です。プログラムは必ず上から下に向かって１つずつ実行されます。

  * 後述する `反復` では上に処理が戻っているように見えますが、下が先に実行されているというわけではありません。

分岐
----------------------------- 
* 分岐はプログラムに欠かせない `~だったら~する` といった考え方です。例えば以下の様なものが考えられます。

  * 数値が奇数か偶数か表示する
  * ファイルが存在したら削除する

* 以下のように記述できます。`if文`, `else文` を適用する範囲のインデントを下げるのがポイントです。

.. code-block:: python

  i = 100
  if i % 2 == 1:
      print(i, 'は奇数です')
  else:
      print(i, 'は偶数です')

  i = 101
  if i % 2 == 1:
      print(i, 'は奇数です')
  else:
      print(i, 'は偶数です')

* ※1 `%` は余りを計算する演算子です。 `2で割って1余る数字` は `奇数` と判断しています。
* ※2 `==` は一致することを確かめる演算子です。
* `else` は `if` に該当しなかった時に実行されます。

コラム
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* `if`, `else` の他にPythonには `elif` と呼ばれる特殊な文があります。
 
  * これは`else` かつ `if` (さらに条件を書きたい)といった場合に利用されます。以下のように利用します。

.. code-block:: python

  if i > 0:
      print(i, 'は1以上の正の数です')
  elif i < 0:
      print(i, 'は負の数です')
  else:
      print('0です')

* Pythonには `case` 文と呼ばれる分岐が存在しないため、 `if`, `elif`, `else` を組み合わせて表現することになります。

反復(ループ)
-----------------------------
* 反復は繰り返しを表現します。
* 以下はカレントディレクトリに存在するファイル一覧を表示する例です。

.. code-block:: python

  import os
  for f in os.listdir('.'):
      print(f)

コラム
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* Pythonにおける反復は `for文`, `while文` のいずれでも表現できますが、今回のチュートリアルで使うのは `for文` だけで事足ります。

  * 実際の利用ケースも `while文` より `for文` の方が多いです。


課題
=============================
第1部の知識を応用して以下の課題を解いてみましょう。
課題は全部で5問ありますが、1問目を解くことができれば十分です。

* `Q1.ディレクトリ内のファイルを検索するsearch関数を作成しましょう <code1/q1.rst>`_
* `Q2.指定したpathがディレクトリでない場合にエラーメッセージを表示しましょう <code1/q2.rst>`_
* `Q3.指定したpathが存在しない場合にエラーメッセージを表示しましょう <code1/q3.rst>`_
* `Q4.ディレクトリの中身を再帰的に検索しましょう <code1/q4.rst>`_
* `Q5.該当文字列が分かるようにしましょう <code1/q5.rst>`_
