=============================
第2部 基本的なPillowの使い方
=============================

第2部では、より実用的なスクリプト開発向けて、公開されたサードパーティのパッケージを使う方法を学びます。

また、実際にサードパーティのパッケージをインストールし、Python コードから利用してみましょう。

題材とする **Pillow** はサードパーティのパッケージのひとつで、画像処理を行うライブラリです。

pipを使ってみよう
=================

サードパーティパッケージは、
**pip** というコマンドを用いて自分の環境にインストールことができます。
これは、PHPの ``composer`` コマンドやJavaScriptの ``npm`` コマンドに相当します。

pipでインストールできるサードパーティのパッケージは、
**Python Package Index** (PyPI: https://pypi.python.org/pypi) に登録されています。

PyPIには、DjangoやFlaskといったWeb開発のためのフレームワークをはじめ、
numpyなどの数値計算ライブラリやプロビジョニングツールのAnsibleなど、
様々なパッケージが登録されており、pipで簡単にインストールすることができます。

もちろんPillowもPyPIに登録されているのでpipでインストールすることができます。

pipのインストール
-----------------

ではpipはどのようにインストールするのでしょう。

pipのインストール方法はOSによって異なります。

:Ubuntu: get-pip.py
:Windows/OSX: ensurepip

.. note::

  ``$`` の後にコマンドが続いている表記は、
  ターミナル・コマンドプロンプトでコマンドを入力することを想定しています。

  ``$ python my_script.py``


Windows/OSX
~~~~~~~~~~~

実は Windows/OSX の場合、
Pythonをインストールした際にpipも一緒にインストールされています。

以下のコマンドを実行し、pipがインストールされていることを確認してみましょう。

::

  $ pip --version
  pip 8.1.1 from c:\users\pyconjp\appdata\local\programs\python\python35-32\lib\site-packages (python 3.5)

.. warning::

  ただし、Pythonの公式 (python.org) のインストーラでインストールした場合以外はこの限りではありません。

.. todo:: ensurepip の説明どうしよう

Ubuntu
~~~~~~

Ubuntuにpipをインストールするには、PyPIが配布している ``get-pip.py`` というインストールスクリプトを用います。

以下のコマンドでpipをインストールします。

::

  $ curl https://bootstrap.pypa.io/get-pip.py | sudo python3
  $ pip --version
  pip 8.1.2 from /usr/local/lib/python3.4/dist-packages (python 3.4)

.. caution::

  ``python`` コマンドではなく ``python3`` コマンドを使うことに注意してください。
  ``python`` コマンドを使うと、 Python 2 用に pip がインストールされてしまいます。

.. note::

  ``curl`` コマンドがインストールされていない場合は、
  ``sudo apt-get install -y curl`` でインストールできます。


このままだとpipでパッケージインストール時にsudoが必要となるので、
ホームディレクトリ下のパッケージインストール用ディレクトリにインストールされるように設定します

::

  $ mkdir -p ~/.config/pip/
  $ echo -e '[install]\nuser = yes' > ~/.config/pip/pip.conf

これでインストールは完了です

pipのバージョン確認
-------------------

次に、pipが正しくインストールされているかを確認しましょう

先ほどと繰り返しになりますが、以下のコマンドを実行してください

::

  $ pip --version
  pip 8.1.2 from /usr/local/lib/python3.4/dist-packages (python 3.4)

この出力はそれぞれ次のような意味です

- ``pip 8.1.2`` pip のバージョン
- ``from /usr/local/lib/python3.4/dist-packages`` pipでインストールされたパッケージが配置されるディレクトリ・フォルダ
- ``(python 3.4)`` pip が動いてるPythonインタプリタのバージョン

出力から、以下のことが確認できれば、無事にpipがインストールできています

- pip のバージョンが 8 以上 (``8.0.0``, ``8.1.2`` など)
- Python のバージョンが 3.4 または 3.5

.. todo:: え！？問題があった！？その時は講師を呼んでください


Pillowをインストールしよう
==========================

pipがインストールできたので、実際にパッケージをインストールしてみましょう。

今回は、Pillowという画像処理用のライブラリをインストールします。

Pillowは画像処理を行うライブラリで、画像の縮小や切り取りをはじめ、
様々な画像編集を行うことができます。

.. todo:: 作例とかあるといいかも

Pillowは ``pip install`` コマンドでインストールすることができます。

以下のコマンドを実行してください。

::

  $ pip install Pillow

では、インストールができたことを確認してみましょう。
インストールされているパッケージを確認するには、 ``pip freeze`` コマンドを実行します

::

  $ pip freeze
  Pillow==3.3.1

``==`` の左側がインストールしたパッケージ名、右側がパッケージのバージョンです。
Pillow がインストールされていれば、上記のような表示が得られます。

.. note::

  インストールしたタイミングによってはバージョンが異なる場合がありますが問題ありません。

.. note::

  インストールしたパッケージを削除するには、 ``pip uninstall パッケージ名`` というコマンド使います。
  例えば、 Pillow を削除するには ``pip uninstall Pillow`` とします。

  参考: https://pip.pypa.io/en/stable/user_guide/

画像を読み込んでみよう
======================

Pillowで画像を読み込んで、画像のサイズを表示するスクリプトを書いてみましょう。

Pillowで画像を読み込むには、
``PIL.Image`` モジュールの ``open()`` 関数を用います。

また、 画像のサイズは、
``open()`` 関数が返すImageオブジェクトの ``size`` 属性から、
``(width, height)`` という int 型のタプル形式で取得できます。


.. code-block:: python

  # read_image.py

  from PIL import Image


  with Image.open('./2016.png', 'r') as im:
      print('%dx%d' % im.size)

配布した画像ファイル ``2016.png`` と同じディレクトリに、
``read_image.py`` という名前で上記のファイルを作成してください。

.. note::

  PIL(Python Imaging Library)はPillowの分岐（フォーク）元のライブラリです。
  PILは長らく開発が停滞しており、PillowはPILをフォークし開発を後継しています。

すると下記のようなディレクトリ構成になります。

::

  ./
  +- 2016.png
  +- read_image.py

では、このスクリプトを実行してみましょう。

::

  $ python3 read_image.py
  WIDTHxHEIGHT

.. todo:: 実際の画像サイズを記載

スクリプトを実行すると上記のように画像ファイルのサイズが出力されます。


画像を保存してみよう
=====================

では開いたファイルを保存してみましょう。

画像を保存するには、 Image オブジェクトの ``save()`` メソッドを使います。

``save()`` メソッドの引数は次のようになっています。

:第1引数:
    パス
:第2引数:
    画像フォーマット
    （省略すると第一引数の拡張子から推測したフォーマットが選ばれます）

今回は開いた PNG ファイルを JPEG 形式で保存してみましょう。

``write_image.py`` という名前で以下のファイルを作成します。


.. code-block:: python

  # write_image.py

  from PIL import Image


  with Image.open('./2016.png', 'r') as im:
      im.save('./2016.jpg', 'JPEG')

::

  $ python3 write_image.py
  $

これで画像が書き出されているはずです

Linux/OSXでは ``ls`` コマンドを、
Windowsでは ``dir`` コマンドを使って確認してみましょう。

Linux/OSX::

  $ ls
  read_image.py write_image.py  2016.jpg  2016.png

Windows::

  $ dir /B
  read_image.py
  write_image.py
  2016.jpg
  2016.png

出力が確認できたらEye of GnomeやWindows フォトビューアを使って
``2016.jpg`` を開いてみてください。

画像を縮小してみよう
====================

.. todo::

  - 画像を縮小するには
  - 画像を開いて縮小して保存するところまで通しで行う



.. Handbook のリンクあるとあとで便利かな
.. https://pillow.readthedocs.io/en/3.3.x/handbook/index.html
